enum AuthRole {
  """Administrator role"""
  admin

  """All users (including unauthenticated and authenticated users)"""
  public

  """System processes without a user context, e.g. background jobs"""
  system

  """All authenticated users"""
  user
}

type Blog {
  id: ID!
  name: String!
  userId: Uuid!
}

"""Input type for changePassword mutation"""
input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

"""Payload type for changePassword mutation"""
type ChangePasswordPayload {
  user: User!
}

"""Input type for createUser mutation"""
input CreateUserInput {
  data: UserCreateData!
}

"""Payload type for createUser mutation"""
type CreateUserPayload {
  user: User!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""Input type for deleteUser mutation"""
input DeleteUserInput {
  id: Uuid!
}

"""Payload type for deleteUser mutation"""
type DeleteUserPayload {
  user: User!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

"""Payload type for logOut mutation"""
type LogOutPayload {
  """Whether the logout was successful."""
  success: Boolean!
}

"""Input type for loginWithEmailPassword mutation"""
input LoginWithEmailPasswordInput {
  email: String!
  password: String!
}

"""Payload type for loginWithEmailPassword mutation"""
type LoginWithEmailPasswordPayload {
  session: UserSessionPayload!
}

type Mutation {
  changePassword(input: ChangePasswordInput!): ChangePasswordPayload!
  createUser(input: CreateUserInput!): CreateUserPayload!
  deleteUser(input: DeleteUserInput!): DeleteUserPayload!
  logOut: LogOutPayload!
  loginWithEmailPassword(input: LoginWithEmailPasswordInput!): LoginWithEmailPasswordPayload!
  registerWithEmailPassword(input: RegisterWithEmailPasswordInput!): RegisterWithEmailPasswordPayload!
  resetUserPassword(input: ResetUserPasswordInput!): ResetUserPasswordPayload!
  updateUser(input: UpdateUserInput!): UpdateUserPayload!
  updateUserRoles(input: UpdateUserRolesInput!): UpdateUserRolesPayload!
}

type Query {
  blog(id: Uuid!): Blog!
  blogs: [Blog!]!

  """Get the current user session"""
  currentUserSession: UserSessionPayload
  user(id: Uuid!): User!
  users: [User!]!
}

"""Input type for registerWithEmailPassword mutation"""
input RegisterWithEmailPasswordInput {
  email: String!
  password: String!
}

"""Payload type for registerWithEmailPassword mutation"""
type RegisterWithEmailPasswordPayload {
  session: UserSessionPayload!
}

"""Input type for resetUserPassword mutation"""
input ResetUserPasswordInput {
  newPassword: String!
  userId: Uuid!
}

"""Payload type for resetUserPassword mutation"""
type ResetUserPasswordPayload {
  user: User!
}

"""Input type for updateUser mutation"""
input UpdateUserInput {
  data: UserUpdateData!
  id: Uuid!
}

"""Payload type for updateUser mutation"""
type UpdateUserPayload {
  user: User!
}

"""Input type for updateUserRoles mutation"""
input UpdateUserRolesInput {
  roles: [String!]!
  userId: Uuid!
}

"""Payload type for updateUserRoles mutation"""
type UpdateUserRolesPayload {
  user: User!
}

type User {
  email: String
  emailVerified: Boolean!
  id: ID!
  name: String
  roles: [UserRole!]!
}

input UserCreateData {
  email: String
  emailVerified: Boolean
  name: String
}

type UserRole {
  role: String!
  userId: Uuid!
}

type UserSessionPayload {
  expiresAt: DateTime
  roles: [AuthRole!]!
  user: User!
  userId: Uuid!
}

input UserUpdateData {
  email: String
  emailVerified: Boolean
  name: String
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar Uuid