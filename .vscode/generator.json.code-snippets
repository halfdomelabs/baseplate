{
  "GeneratorProvider": {
    "prefix": "baseplateprovider",
    "scope": "typescript",
    "body": [
      "",
      "export interface ${1:ProviderName}Provider {",
      "  placeholder: () => void;",
      "};",
      "",
      "export const ${1/(^[A-Z])/${1:/downcase}/}Provider = createProviderType<${1}Provider>('${1/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}');"
    ],
    "description": "Create a Baseplate provider"
  },
  "Generator": {
    "prefix": "baseplategen",
    "scope": "typescript",
    "body": [
      "import {",
      "  createGeneratorWithTasks,",
      "  createProviderType,",
      "} from '@halfdomelabs/sync';",
      "import { z } from 'zod';",
      "",
      "const descriptorSchema = z.object({});",
      "",
      "export type ${1:GeneratorName}Provider = unknown;",
      "",
      "export const ${1/(^[A-Z])/${1:/downcase}/}Provider = createProviderType<${1}Provider>('${1/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}');",
      "",
      "export const ${1/(^[A-Z])/${1:/downcase}Generator = createGenerator({",
      "  descriptorSchema,",
      "  getDefaultChildGenerators: () => ({}),",
      "  buildTasks(taskBuilder, descriptor) {",
      "    taskBuilder.addTask({",
      "      name: 'main',",
      "      dependencies: {},",
      "      exports: {",
      "        ${1/(^[A-Z])/${1:/downcase}/}: ${1/(^[A-Z])/${1:/downcase}/}Provider",
      "      },",
      "      run(dependencies) {",
      "        return {",
      "          providers: {",
      "            ${1/(^[A-Z])/${1:/downcase}/}: {},",
      "          },",
      "          build: async (builder) => {},",
      "        };",
      "      },",
      "    });",
      "  },",
      "});",
    ],
    "description": "Create Baseplate generator with provider"
  },
  "BasicGenerator": {
    "prefix": "baseplategensimple",
    "scope": "typescript",
    "body": [
      "import {",
      "  createGeneratorWithTasks,",
      "  createProviderType,",
      "} from '@halfdomelabs/sync';",
      "import { z } from 'zod';",
      "",
      "const descriptorSchema = z.object({});",
      "",
      "export const ${1}Generator = createGeneratorWithTasks({",
      "  descriptorSchema,",
      "  getDefaultChildGenerators: () => ({}),",
      "  buildTasks(taskBuilder, descriptor) {",
      "    taskBuilder.addTask({",
      "      name: 'main',",
      "      dependencies: {},",
      "      run(dependencies) {",
      "        return {",
      "          build: async (builder) => {},",
      "        };",
      "      },",
      "    });",
      "  },",
      "});",
      "",
    ],
    "description": "Create Baseplate generator with no provider"
  }
}
