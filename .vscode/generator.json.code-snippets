{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "GeneratorProvider": {
    "prefix": "baseplateprovider",
    "scope": "typescript",
    "body": [
      "",
      "export interface ${1:ProviderName}Provider {",
      "  placeholder: () => void;",
      "};",
      "",
      "export const ${1/(^[A-Z])/${1:/downcase}/}Provider = createProviderType<${1}Provider>('${1/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}');"
    ],
    "description": "Create a Baseplate provider"
  },
  "Generator": {
    "prefix": "baseplategen",
    "scope": "typescript",
    "body": [
      "import {",
      "  createGeneratorWithTasks,",
      "  createProviderType,",
      "  createTaskConfigBuilder,",
      "} from '@halfdomelabs/sync';",
      "import { z } from 'zod';",
      "",
      "const descriptorSchema = z.object({});",
      "",
      "type Descriptor = z.infer<typeof descriptorSchema>;",
      "",
      "export type ${1:GeneratorName}Provider = unknown;",
      "",
      "export const ${1/(^[A-Z])/${1:/downcase}/}Provider = createProviderType<${1}Provider>('${1/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}');",
      "",
      "const createMainTask = createTaskConfigBuilder((descriptor: Descriptor) => ({",
      "  name: 'main',",
      "  dependencies: {},",
      "  exports: {",
      "    ${1/(^[A-Z])/${1:/downcase}/}: ${1/(^[A-Z])/${1:/downcase}/}Provider",
      "  },",
      "  run(dependencies) {",
      "    return {",
      "      getProviders: () => ({",
      "        ${1/(^[A-Z])/${1:/downcase}/}: {},",
      "      }),",
      "      build: async (builder) => {},",
      "    };",
      "  },",
      "}));",
      "",
      "const ${1}Generator = createGeneratorWithTasks({",
      "  descriptorSchema,",
      "  getDefaultChildGenerators: () => ({}),",
      "  buildTasks(taskBuilder, descriptor) {",
      "    taskBuilder.addTask(createMainTask(descriptor));",
      "  },",
      "});",
      "",
      "export default ${1}Generator;"
    ],
    "description": "Create Baseplate generator with provider"
  },
  "GeneratorWithConfig": {
    "prefix": "baseplategenconfig",
    "scope": "typescript",
    "body": [
      "import {",
      "  createProviderType,",
      "  createGeneratorWithChildren,",
      "  NonOverwriteableMap,",
      "  createNonOverwriteableMap,",
      "} from '@halfdomelabs/sync';",
      "import { z } from 'zod';",
      "",
      "const descriptorSchema = z.object({});",
      "",
      "export interface ${1:GeneratorName}GeneratorConfig {",
      "  setting?: string;",
      "}",
      "",
      "export interface ${1}Provider {",
      "  getConfig(): NonOverwriteableMap<${1}GeneratorConfig>;",
      "}",
      "",
      "export const ${1/(^[A-Z])/${1:/downcase}/}Provider = createProviderType<${1}Provider>('${1/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}');",
      "",
      "const ${1}Generator = createGeneratorWithChildren({",
      "  descriptorSchema,",
      "  getDefaultChildGenerators: () => ({}),",
      "  dependencies: {},",
      "  exports: {",
      "    ${1/(^[A-Z])/${1:/downcase}/}: ${1/(^[A-Z])/${1:/downcase}/}Provider",
      "  },",
      "  createGenerator(descriptor, dependencies) {",
      "    const config = createNonOverwriteableMap(",
      "      {},",
      "      { name: '${1/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}-config' }",
      "    );",
      "    return {",
      "      getProviders: () => ({",
      "        ${1/(^[A-Z])/${1:/downcase}/}: {",
      "          getConfig: () => config,",
      "        },",
      "      }),",
      "      build: async (builder) => {},",
      "    };",
      "  },",
      "});",
      "",
      "export default ${1}Generator;"
    ],
    "description": "Create Baseplate generator with provider"
  },
  "BasicGenerator": {
    "prefix": "baseplategensimple",
    "scope": "typescript",
    "body": [
      "import {",
      "  createGeneratorWithTasks,",
      "  createProviderType,",
      "  createTaskConfigBuilder,",
      "} from '@halfdomelabs/sync';",
      "import { z } from 'zod';",
      "",
      "const descriptorSchema = z.object({});",
      "",
      "type Descriptor = z.infer<typeof descriptorSchema>;",
      "",
      "const createMainTask = createTaskConfigBuilder((descriptor: Descriptor) => ({",
      "  name: 'main',",
      "  dependencies: {},",
      "  run(dependencies) {",
      "    return {",
      "      build: async (builder) => {},",
      "    };",
      "  },",
      "}));",
      "",
      "const ${1}Generator = createGeneratorWithTasks({",
      "  descriptorSchema,",
      "  getDefaultChildGenerators: () => ({}),",
      "  buildTasks(taskBuilder, descriptor) {",
      "    taskBuilder.addTask(createMainTask(descriptor));",
      "  },",
      "});",
      "",
      "export default ${1}Generator;"
    ],
    "description": "Create Baseplate generator with no provider"
  }
}
