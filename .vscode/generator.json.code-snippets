{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Generator": {
		"prefix": "baseplategen",
		"scope": "typescript",
		"body": [
			"import {",
			"  createGeneratorConfig,",
			"  createGeneratorDescriptor,",
			"  GeneratorDescriptor,",
			"  createProviderType,",
			"} from '@baseplate/sync';",
			"import * as yup from 'yup';",
			"",
			"interface ${1}Descriptor extends GeneratorDescriptor {",
			"  placeholder: string,",
			"}",
			"",
			"const descriptorSchema = {",
			"  placeholder: yup.string()",
			"};",
			"",
			"export type ${1}Provider = unknown;",
			"",
			"export const ${2:generatorName}Provider = createProviderType<${1}Provider>('${3:generator-name}');",
			"",
			"const ${1:GeneratorName}Generator = createGeneratorConfig({",
			"  descriptorSchema: createGeneratorDescriptor<${1}Descriptor>(descriptorSchema),",
			"  dependsOn: {},",
			"  exports: {",
			"    ${2}: ${2}Provider",
			"  },",
			"  createGenerator(descriptor, dependencies) {",
			"    return {",
			"      getProviders: () => ({",
			"        ${2}: {},",
			"      }),",
			"      build: (context) => {},",
			"    };",
			"  },",
			"});",
			"",
			"export default ${1}Generator;",
		],
		"description": "Create Baseplate generator with provider"
	},
}