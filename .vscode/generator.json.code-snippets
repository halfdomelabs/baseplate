{
  "GeneratorProvider": {
    "prefix": "baseplateprovider",
    "scope": "typescript",
    "body": [
      "export interface ${1:ProviderName}Provider {",
      "  placeholder(): void;",
      "}",
      "",
      "export const ${1/(^[A-Z])/${1:/downcase}/}Provider = createProviderType<${1}Provider>('${1/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}');"
    ],
    "description": "Create a Baseplate provider"
  },
  "Generator": {
    "prefix": "baseplategen",
    "scope": "typescript",
    "body": [
      "import {",
      "  createGenerator,",
      "  createGeneratorTask,",
      "  createProviderType,",
      "} from '@halfdomelabs/sync';",
      "import { z } from 'zod';",
      "",
      "import { projectScope } from './scopes';",
      "",
      "const descriptorSchema = z.object({});",
      "",
      "export interface ${1:ProviderName}Provider {",
      "  placeholder(): void;",
      "}",
      "",
      "export const ${1/(^[A-Z])/${1:/downcase}/}Provider = createProviderType<${1}Provider>('${1/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}');",
      "",
      "/**",
      " * ${3:Description of the generator}",
      " */",
      "export const ${1/(^[A-Z])/${1:/downcase}/}Generator = createGenerator({",
      "  name: '${2:scope}/${1/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}',",
      "  generatorFileUrl: import.meta.url,",
      "  descriptorSchema,",
      "  buildTasks: (descriptor) => ({",
      "    main: createGeneratorTask({",
      "      exports: {",
      "        ${1/(^[A-Z])/${1:/downcase}/}: ${1/(^[A-Z])/${1:/downcase}/}Provider.export(projectScope)",
      "      },",
      "      dependencies: {},",
      "      run(deps) {",
      "        return {",
      "          providers: {",
      "            ${1/(^[A-Z])/${1:/downcase}/}: {",
      "              placeholder() {",
      "                // Implementation",
      "              }",
      "            }",
      "          },",
      "          build: async (builder) => {",
      "            // Generate code here",
      "          }",
      "        };",
      "      }",
      "    })",
      "  })",
      "});"
    ],
    "description": "Create Baseplate generator with provider"
  },
  "BasicGenerator": {
    "prefix": "baseplategensimple",
    "scope": "typescript",
    "body": [
      "import {",
      "  createGenerator,",
      "  createGeneratorTask,",
      "} from '@halfdomelabs/sync';",
      "import { z } from 'zod';",
      "",
      "const descriptorSchema = z.object({});",
      "",
      "/**",
      " * ${3:Description of the generator}",
      " */",
      "export const ${1}Generator = createGenerator({",
      "  name: '${2:scope}/${1/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}',",
      "  generatorFileUrl: import.meta.url,",
      "  descriptorSchema,",
      "  buildTasks: (descriptor) => ({",
      "    main: createGeneratorTask({",
      "      dependencies: {},",
      "      run(deps) {",
      "        return {",
      "          build: async (builder) => {",
      "            // Generate code here",
      "          }",
      "        };",
      "      }",
      "    })",
      "  })",
      "});"
    ],
    "description": "Create Baseplate generator with no provider"
  },
  "Wrap with TPL markers": {
    "prefix": "tplwrap",
    "body": [
      "/* TPL_${1:VAR}:START */ ${TM_SELECTED_TEXT} /* TPL_${1:VAR}:END */"
    ],
    "description": "Wrap selected text with TPL markers"
  },
  "Create Config Provider Task": {
    "prefix": "configProviderTask",
    "body": [
      "import { createConfigProviderTask } from '@halfdomelabs/sync';",
      "",
      "const [setupTask, ${1:name}ConfigProvider, ${1:name}ConfigValuesProvider] =",
      "  createConfigProviderTask(",
      "    (t) => ({",
      "      ${2:value: t.scalar<string>()}",
      "    }),",
      "    {",
      "      prefix: '${1/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}',",
      "      configScope: ${3:projectScope},",
      "    },",
      "  );",
      "",
      "export { ${1:name}ConfigProvider };"
    ],
    "description": "Creates a config provider task with customizable configuration"
  }
}