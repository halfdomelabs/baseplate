/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteRouteImport } from './routes/settings/route'
import { Route as PluginsRouteRouteImport } from './routes/plugins/route'
import { Route as DataRouteRouteImport } from './routes/data/route'
import { Route as AppsRouteRouteImport } from './routes/apps/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as PluginsIndexRouteImport } from './routes/plugins/index'
import { Route as DataIndexRouteImport } from './routes/data/index'
import { Route as AppsIndexRouteImport } from './routes/apps/index'
import { Route as SettingsThemeBuilderRouteImport } from './routes/settings/theme-builder'
import { Route as SettingsTemplateExtractorRouteImport } from './routes/settings/template-extractor'
import { Route as SettingsHierarchyRouteImport } from './routes/settings/hierarchy'
import { Route as DataModelsRouteRouteImport } from './routes/data/models/route'
import { Route as DataEnumsRouteRouteImport } from './routes/data/enums/route'
import { Route as DataModelsIndexRouteImport } from './routes/data/models/index'
import { Route as DataEnumsIndexRouteImport } from './routes/data/enums/index'
import { Route as PluginsEditIdRouteImport } from './routes/plugins/edit.$id'
import { Route as AppsEditKeyRouteRouteImport } from './routes/apps/edit.$key/route'
import { Route as AppsEditKeyIndexRouteImport } from './routes/apps/edit.$key/index'
import { Route as AppsEditKeyBackendRouteImport } from './routes/apps/edit.$key/backend'
import { Route as DataModelsEditKeyRouteRouteImport } from './routes/data/models/edit.$key/route'
import { Route as DataEnumsEditKeyRouteRouteImport } from './routes/data/enums/edit.$key/route'
import { Route as AppsEditKeyWebRouteRouteImport } from './routes/apps/edit.$key/web/route'
import { Route as AppsEditKeyAdminRouteRouteImport } from './routes/apps/edit.$key/admin/route'
import { Route as DataModelsEditKeyIndexRouteImport } from './routes/data/models/edit.$key/index'
import { Route as DataEnumsEditKeyIndexRouteImport } from './routes/data/enums/edit.$key/index'
import { Route as AppsEditKeyWebIndexRouteImport } from './routes/apps/edit.$key/web/index'
import { Route as AppsEditKeyAdminIndexRouteImport } from './routes/apps/edit.$key/admin/index'
import { Route as DataModelsEditKeyServiceRouteImport } from './routes/data/models/edit.$key/service'
import { Route as DataModelsEditKeyGraphqlRouteImport } from './routes/data/models/edit.$key/graphql'
import { Route as AppsEditKeyAdminSectionsRouteImport } from './routes/apps/edit.$key/admin/sections'
import { Route as AppsEditKeyWebAdminIndexRouteImport } from './routes/apps/edit.$key/web/admin/index'
import { Route as AppsEditKeyAdminSectionsSectionKeyRouteImport } from './routes/apps/edit.$key/admin/sections.$sectionKey'

const SettingsRouteRoute = SettingsRouteRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const PluginsRouteRoute = PluginsRouteRouteImport.update({
  id: '/plugins',
  path: '/plugins',
  getParentRoute: () => rootRouteImport,
} as any)
const DataRouteRoute = DataRouteRouteImport.update({
  id: '/data',
  path: '/data',
  getParentRoute: () => rootRouteImport,
} as any)
const AppsRouteRoute = AppsRouteRouteImport.update({
  id: '/apps',
  path: '/apps',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const PluginsIndexRoute = PluginsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PluginsRouteRoute,
} as any)
const DataIndexRoute = DataIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DataRouteRoute,
} as any)
const AppsIndexRoute = AppsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppsRouteRoute,
} as any)
const SettingsThemeBuilderRoute = SettingsThemeBuilderRouteImport.update({
  id: '/theme-builder',
  path: '/theme-builder',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const SettingsTemplateExtractorRoute =
  SettingsTemplateExtractorRouteImport.update({
    id: '/template-extractor',
    path: '/template-extractor',
    getParentRoute: () => SettingsRouteRoute,
  } as any)
const SettingsHierarchyRoute = SettingsHierarchyRouteImport.update({
  id: '/hierarchy',
  path: '/hierarchy',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const DataModelsRouteRoute = DataModelsRouteRouteImport.update({
  id: '/models',
  path: '/models',
  getParentRoute: () => DataRouteRoute,
} as any)
const DataEnumsRouteRoute = DataEnumsRouteRouteImport.update({
  id: '/enums',
  path: '/enums',
  getParentRoute: () => DataRouteRoute,
} as any)
const DataModelsIndexRoute = DataModelsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DataModelsRouteRoute,
} as any)
const DataEnumsIndexRoute = DataEnumsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DataEnumsRouteRoute,
} as any)
const PluginsEditIdRoute = PluginsEditIdRouteImport.update({
  id: '/edit/$id',
  path: '/edit/$id',
  getParentRoute: () => PluginsRouteRoute,
} as any)
const AppsEditKeyRouteRoute = AppsEditKeyRouteRouteImport.update({
  id: '/edit/$key',
  path: '/edit/$key',
  getParentRoute: () => AppsRouteRoute,
} as any)
const AppsEditKeyIndexRoute = AppsEditKeyIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppsEditKeyRouteRoute,
} as any)
const AppsEditKeyBackendRoute = AppsEditKeyBackendRouteImport.update({
  id: '/backend',
  path: '/backend',
  getParentRoute: () => AppsEditKeyRouteRoute,
} as any)
const DataModelsEditKeyRouteRoute = DataModelsEditKeyRouteRouteImport.update({
  id: '/edit/$key',
  path: '/edit/$key',
  getParentRoute: () => DataModelsRouteRoute,
} as any)
const DataEnumsEditKeyRouteRoute = DataEnumsEditKeyRouteRouteImport.update({
  id: '/edit/$key',
  path: '/edit/$key',
  getParentRoute: () => DataEnumsRouteRoute,
} as any)
const AppsEditKeyWebRouteRoute = AppsEditKeyWebRouteRouteImport.update({
  id: '/web',
  path: '/web',
  getParentRoute: () => AppsEditKeyRouteRoute,
} as any)
const AppsEditKeyAdminRouteRoute = AppsEditKeyAdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => AppsEditKeyRouteRoute,
} as any)
const DataModelsEditKeyIndexRoute = DataModelsEditKeyIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DataModelsEditKeyRouteRoute,
} as any)
const DataEnumsEditKeyIndexRoute = DataEnumsEditKeyIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DataEnumsEditKeyRouteRoute,
} as any)
const AppsEditKeyWebIndexRoute = AppsEditKeyWebIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppsEditKeyWebRouteRoute,
} as any)
const AppsEditKeyAdminIndexRoute = AppsEditKeyAdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppsEditKeyAdminRouteRoute,
} as any)
const DataModelsEditKeyServiceRoute =
  DataModelsEditKeyServiceRouteImport.update({
    id: '/service',
    path: '/service',
    getParentRoute: () => DataModelsEditKeyRouteRoute,
  } as any)
const DataModelsEditKeyGraphqlRoute =
  DataModelsEditKeyGraphqlRouteImport.update({
    id: '/graphql',
    path: '/graphql',
    getParentRoute: () => DataModelsEditKeyRouteRoute,
  } as any)
const AppsEditKeyAdminSectionsRoute =
  AppsEditKeyAdminSectionsRouteImport.update({
    id: '/sections',
    path: '/sections',
    getParentRoute: () => AppsEditKeyAdminRouteRoute,
  } as any)
const AppsEditKeyWebAdminIndexRoute =
  AppsEditKeyWebAdminIndexRouteImport.update({
    id: '/admin/',
    path: '/admin/',
    getParentRoute: () => AppsEditKeyWebRouteRoute,
  } as any)
const AppsEditKeyAdminSectionsSectionKeyRoute =
  AppsEditKeyAdminSectionsSectionKeyRouteImport.update({
    id: '/$sectionKey',
    path: '/$sectionKey',
    getParentRoute: () => AppsEditKeyAdminSectionsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/apps': typeof AppsRouteRouteWithChildren
  '/data': typeof DataRouteRouteWithChildren
  '/plugins': typeof PluginsRouteRouteWithChildren
  '/settings': typeof SettingsRouteRouteWithChildren
  '/data/enums': typeof DataEnumsRouteRouteWithChildren
  '/data/models': typeof DataModelsRouteRouteWithChildren
  '/settings/hierarchy': typeof SettingsHierarchyRoute
  '/settings/template-extractor': typeof SettingsTemplateExtractorRoute
  '/settings/theme-builder': typeof SettingsThemeBuilderRoute
  '/apps/': typeof AppsIndexRoute
  '/data/': typeof DataIndexRoute
  '/plugins/': typeof PluginsIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/apps/edit/$key': typeof AppsEditKeyRouteRouteWithChildren
  '/plugins/edit/$id': typeof PluginsEditIdRoute
  '/data/enums/': typeof DataEnumsIndexRoute
  '/data/models/': typeof DataModelsIndexRoute
  '/apps/edit/$key/admin': typeof AppsEditKeyAdminRouteRouteWithChildren
  '/apps/edit/$key/web': typeof AppsEditKeyWebRouteRouteWithChildren
  '/data/enums/edit/$key': typeof DataEnumsEditKeyRouteRouteWithChildren
  '/data/models/edit/$key': typeof DataModelsEditKeyRouteRouteWithChildren
  '/apps/edit/$key/backend': typeof AppsEditKeyBackendRoute
  '/apps/edit/$key/': typeof AppsEditKeyIndexRoute
  '/apps/edit/$key/admin/sections': typeof AppsEditKeyAdminSectionsRouteWithChildren
  '/data/models/edit/$key/graphql': typeof DataModelsEditKeyGraphqlRoute
  '/data/models/edit/$key/service': typeof DataModelsEditKeyServiceRoute
  '/apps/edit/$key/admin/': typeof AppsEditKeyAdminIndexRoute
  '/apps/edit/$key/web/': typeof AppsEditKeyWebIndexRoute
  '/data/enums/edit/$key/': typeof DataEnumsEditKeyIndexRoute
  '/data/models/edit/$key/': typeof DataModelsEditKeyIndexRoute
  '/apps/edit/$key/admin/sections/$sectionKey': typeof AppsEditKeyAdminSectionsSectionKeyRoute
  '/apps/edit/$key/web/admin': typeof AppsEditKeyWebAdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings/hierarchy': typeof SettingsHierarchyRoute
  '/settings/template-extractor': typeof SettingsTemplateExtractorRoute
  '/settings/theme-builder': typeof SettingsThemeBuilderRoute
  '/apps': typeof AppsIndexRoute
  '/data': typeof DataIndexRoute
  '/plugins': typeof PluginsIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/plugins/edit/$id': typeof PluginsEditIdRoute
  '/data/enums': typeof DataEnumsIndexRoute
  '/data/models': typeof DataModelsIndexRoute
  '/apps/edit/$key/backend': typeof AppsEditKeyBackendRoute
  '/apps/edit/$key': typeof AppsEditKeyIndexRoute
  '/apps/edit/$key/admin/sections': typeof AppsEditKeyAdminSectionsRouteWithChildren
  '/data/models/edit/$key/graphql': typeof DataModelsEditKeyGraphqlRoute
  '/data/models/edit/$key/service': typeof DataModelsEditKeyServiceRoute
  '/apps/edit/$key/admin': typeof AppsEditKeyAdminIndexRoute
  '/apps/edit/$key/web': typeof AppsEditKeyWebIndexRoute
  '/data/enums/edit/$key': typeof DataEnumsEditKeyIndexRoute
  '/data/models/edit/$key': typeof DataModelsEditKeyIndexRoute
  '/apps/edit/$key/admin/sections/$sectionKey': typeof AppsEditKeyAdminSectionsSectionKeyRoute
  '/apps/edit/$key/web/admin': typeof AppsEditKeyWebAdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/apps': typeof AppsRouteRouteWithChildren
  '/data': typeof DataRouteRouteWithChildren
  '/plugins': typeof PluginsRouteRouteWithChildren
  '/settings': typeof SettingsRouteRouteWithChildren
  '/data/enums': typeof DataEnumsRouteRouteWithChildren
  '/data/models': typeof DataModelsRouteRouteWithChildren
  '/settings/hierarchy': typeof SettingsHierarchyRoute
  '/settings/template-extractor': typeof SettingsTemplateExtractorRoute
  '/settings/theme-builder': typeof SettingsThemeBuilderRoute
  '/apps/': typeof AppsIndexRoute
  '/data/': typeof DataIndexRoute
  '/plugins/': typeof PluginsIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/apps/edit/$key': typeof AppsEditKeyRouteRouteWithChildren
  '/plugins/edit/$id': typeof PluginsEditIdRoute
  '/data/enums/': typeof DataEnumsIndexRoute
  '/data/models/': typeof DataModelsIndexRoute
  '/apps/edit/$key/admin': typeof AppsEditKeyAdminRouteRouteWithChildren
  '/apps/edit/$key/web': typeof AppsEditKeyWebRouteRouteWithChildren
  '/data/enums/edit/$key': typeof DataEnumsEditKeyRouteRouteWithChildren
  '/data/models/edit/$key': typeof DataModelsEditKeyRouteRouteWithChildren
  '/apps/edit/$key/backend': typeof AppsEditKeyBackendRoute
  '/apps/edit/$key/': typeof AppsEditKeyIndexRoute
  '/apps/edit/$key/admin/sections': typeof AppsEditKeyAdminSectionsRouteWithChildren
  '/data/models/edit/$key/graphql': typeof DataModelsEditKeyGraphqlRoute
  '/data/models/edit/$key/service': typeof DataModelsEditKeyServiceRoute
  '/apps/edit/$key/admin/': typeof AppsEditKeyAdminIndexRoute
  '/apps/edit/$key/web/': typeof AppsEditKeyWebIndexRoute
  '/data/enums/edit/$key/': typeof DataEnumsEditKeyIndexRoute
  '/data/models/edit/$key/': typeof DataModelsEditKeyIndexRoute
  '/apps/edit/$key/admin/sections/$sectionKey': typeof AppsEditKeyAdminSectionsSectionKeyRoute
  '/apps/edit/$key/web/admin/': typeof AppsEditKeyWebAdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/apps'
    | '/data'
    | '/plugins'
    | '/settings'
    | '/data/enums'
    | '/data/models'
    | '/settings/hierarchy'
    | '/settings/template-extractor'
    | '/settings/theme-builder'
    | '/apps/'
    | '/data/'
    | '/plugins/'
    | '/settings/'
    | '/apps/edit/$key'
    | '/plugins/edit/$id'
    | '/data/enums/'
    | '/data/models/'
    | '/apps/edit/$key/admin'
    | '/apps/edit/$key/web'
    | '/data/enums/edit/$key'
    | '/data/models/edit/$key'
    | '/apps/edit/$key/backend'
    | '/apps/edit/$key/'
    | '/apps/edit/$key/admin/sections'
    | '/data/models/edit/$key/graphql'
    | '/data/models/edit/$key/service'
    | '/apps/edit/$key/admin/'
    | '/apps/edit/$key/web/'
    | '/data/enums/edit/$key/'
    | '/data/models/edit/$key/'
    | '/apps/edit/$key/admin/sections/$sectionKey'
    | '/apps/edit/$key/web/admin'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/settings/hierarchy'
    | '/settings/template-extractor'
    | '/settings/theme-builder'
    | '/apps'
    | '/data'
    | '/plugins'
    | '/settings'
    | '/plugins/edit/$id'
    | '/data/enums'
    | '/data/models'
    | '/apps/edit/$key/backend'
    | '/apps/edit/$key'
    | '/apps/edit/$key/admin/sections'
    | '/data/models/edit/$key/graphql'
    | '/data/models/edit/$key/service'
    | '/apps/edit/$key/admin'
    | '/apps/edit/$key/web'
    | '/data/enums/edit/$key'
    | '/data/models/edit/$key'
    | '/apps/edit/$key/admin/sections/$sectionKey'
    | '/apps/edit/$key/web/admin'
  id:
    | '__root__'
    | '/'
    | '/apps'
    | '/data'
    | '/plugins'
    | '/settings'
    | '/data/enums'
    | '/data/models'
    | '/settings/hierarchy'
    | '/settings/template-extractor'
    | '/settings/theme-builder'
    | '/apps/'
    | '/data/'
    | '/plugins/'
    | '/settings/'
    | '/apps/edit/$key'
    | '/plugins/edit/$id'
    | '/data/enums/'
    | '/data/models/'
    | '/apps/edit/$key/admin'
    | '/apps/edit/$key/web'
    | '/data/enums/edit/$key'
    | '/data/models/edit/$key'
    | '/apps/edit/$key/backend'
    | '/apps/edit/$key/'
    | '/apps/edit/$key/admin/sections'
    | '/data/models/edit/$key/graphql'
    | '/data/models/edit/$key/service'
    | '/apps/edit/$key/admin/'
    | '/apps/edit/$key/web/'
    | '/data/enums/edit/$key/'
    | '/data/models/edit/$key/'
    | '/apps/edit/$key/admin/sections/$sectionKey'
    | '/apps/edit/$key/web/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppsRouteRoute: typeof AppsRouteRouteWithChildren
  DataRouteRoute: typeof DataRouteRouteWithChildren
  PluginsRouteRoute: typeof PluginsRouteRouteWithChildren
  SettingsRouteRoute: typeof SettingsRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/plugins': {
      id: '/plugins'
      path: '/plugins'
      fullPath: '/plugins'
      preLoaderRoute: typeof PluginsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data': {
      id: '/data'
      path: '/data'
      fullPath: '/data'
      preLoaderRoute: typeof DataRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/apps': {
      id: '/apps'
      path: '/apps'
      fullPath: '/apps'
      preLoaderRoute: typeof AppsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/plugins/': {
      id: '/plugins/'
      path: '/'
      fullPath: '/plugins/'
      preLoaderRoute: typeof PluginsIndexRouteImport
      parentRoute: typeof PluginsRouteRoute
    }
    '/data/': {
      id: '/data/'
      path: '/'
      fullPath: '/data/'
      preLoaderRoute: typeof DataIndexRouteImport
      parentRoute: typeof DataRouteRoute
    }
    '/apps/': {
      id: '/apps/'
      path: '/'
      fullPath: '/apps/'
      preLoaderRoute: typeof AppsIndexRouteImport
      parentRoute: typeof AppsRouteRoute
    }
    '/settings/theme-builder': {
      id: '/settings/theme-builder'
      path: '/theme-builder'
      fullPath: '/settings/theme-builder'
      preLoaderRoute: typeof SettingsThemeBuilderRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/settings/template-extractor': {
      id: '/settings/template-extractor'
      path: '/template-extractor'
      fullPath: '/settings/template-extractor'
      preLoaderRoute: typeof SettingsTemplateExtractorRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/settings/hierarchy': {
      id: '/settings/hierarchy'
      path: '/hierarchy'
      fullPath: '/settings/hierarchy'
      preLoaderRoute: typeof SettingsHierarchyRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/data/models': {
      id: '/data/models'
      path: '/models'
      fullPath: '/data/models'
      preLoaderRoute: typeof DataModelsRouteRouteImport
      parentRoute: typeof DataRouteRoute
    }
    '/data/enums': {
      id: '/data/enums'
      path: '/enums'
      fullPath: '/data/enums'
      preLoaderRoute: typeof DataEnumsRouteRouteImport
      parentRoute: typeof DataRouteRoute
    }
    '/data/models/': {
      id: '/data/models/'
      path: '/'
      fullPath: '/data/models/'
      preLoaderRoute: typeof DataModelsIndexRouteImport
      parentRoute: typeof DataModelsRouteRoute
    }
    '/data/enums/': {
      id: '/data/enums/'
      path: '/'
      fullPath: '/data/enums/'
      preLoaderRoute: typeof DataEnumsIndexRouteImport
      parentRoute: typeof DataEnumsRouteRoute
    }
    '/plugins/edit/$id': {
      id: '/plugins/edit/$id'
      path: '/edit/$id'
      fullPath: '/plugins/edit/$id'
      preLoaderRoute: typeof PluginsEditIdRouteImport
      parentRoute: typeof PluginsRouteRoute
    }
    '/apps/edit/$key': {
      id: '/apps/edit/$key'
      path: '/edit/$key'
      fullPath: '/apps/edit/$key'
      preLoaderRoute: typeof AppsEditKeyRouteRouteImport
      parentRoute: typeof AppsRouteRoute
    }
    '/apps/edit/$key/': {
      id: '/apps/edit/$key/'
      path: '/'
      fullPath: '/apps/edit/$key/'
      preLoaderRoute: typeof AppsEditKeyIndexRouteImport
      parentRoute: typeof AppsEditKeyRouteRoute
    }
    '/apps/edit/$key/backend': {
      id: '/apps/edit/$key/backend'
      path: '/backend'
      fullPath: '/apps/edit/$key/backend'
      preLoaderRoute: typeof AppsEditKeyBackendRouteImport
      parentRoute: typeof AppsEditKeyRouteRoute
    }
    '/data/models/edit/$key': {
      id: '/data/models/edit/$key'
      path: '/edit/$key'
      fullPath: '/data/models/edit/$key'
      preLoaderRoute: typeof DataModelsEditKeyRouteRouteImport
      parentRoute: typeof DataModelsRouteRoute
    }
    '/data/enums/edit/$key': {
      id: '/data/enums/edit/$key'
      path: '/edit/$key'
      fullPath: '/data/enums/edit/$key'
      preLoaderRoute: typeof DataEnumsEditKeyRouteRouteImport
      parentRoute: typeof DataEnumsRouteRoute
    }
    '/apps/edit/$key/web': {
      id: '/apps/edit/$key/web'
      path: '/web'
      fullPath: '/apps/edit/$key/web'
      preLoaderRoute: typeof AppsEditKeyWebRouteRouteImport
      parentRoute: typeof AppsEditKeyRouteRoute
    }
    '/apps/edit/$key/admin': {
      id: '/apps/edit/$key/admin'
      path: '/admin'
      fullPath: '/apps/edit/$key/admin'
      preLoaderRoute: typeof AppsEditKeyAdminRouteRouteImport
      parentRoute: typeof AppsEditKeyRouteRoute
    }
    '/data/models/edit/$key/': {
      id: '/data/models/edit/$key/'
      path: '/'
      fullPath: '/data/models/edit/$key/'
      preLoaderRoute: typeof DataModelsEditKeyIndexRouteImport
      parentRoute: typeof DataModelsEditKeyRouteRoute
    }
    '/data/enums/edit/$key/': {
      id: '/data/enums/edit/$key/'
      path: '/'
      fullPath: '/data/enums/edit/$key/'
      preLoaderRoute: typeof DataEnumsEditKeyIndexRouteImport
      parentRoute: typeof DataEnumsEditKeyRouteRoute
    }
    '/apps/edit/$key/web/': {
      id: '/apps/edit/$key/web/'
      path: '/'
      fullPath: '/apps/edit/$key/web/'
      preLoaderRoute: typeof AppsEditKeyWebIndexRouteImport
      parentRoute: typeof AppsEditKeyWebRouteRoute
    }
    '/apps/edit/$key/admin/': {
      id: '/apps/edit/$key/admin/'
      path: '/'
      fullPath: '/apps/edit/$key/admin/'
      preLoaderRoute: typeof AppsEditKeyAdminIndexRouteImport
      parentRoute: typeof AppsEditKeyAdminRouteRoute
    }
    '/data/models/edit/$key/service': {
      id: '/data/models/edit/$key/service'
      path: '/service'
      fullPath: '/data/models/edit/$key/service'
      preLoaderRoute: typeof DataModelsEditKeyServiceRouteImport
      parentRoute: typeof DataModelsEditKeyRouteRoute
    }
    '/data/models/edit/$key/graphql': {
      id: '/data/models/edit/$key/graphql'
      path: '/graphql'
      fullPath: '/data/models/edit/$key/graphql'
      preLoaderRoute: typeof DataModelsEditKeyGraphqlRouteImport
      parentRoute: typeof DataModelsEditKeyRouteRoute
    }
    '/apps/edit/$key/admin/sections': {
      id: '/apps/edit/$key/admin/sections'
      path: '/sections'
      fullPath: '/apps/edit/$key/admin/sections'
      preLoaderRoute: typeof AppsEditKeyAdminSectionsRouteImport
      parentRoute: typeof AppsEditKeyAdminRouteRoute
    }
    '/apps/edit/$key/web/admin/': {
      id: '/apps/edit/$key/web/admin/'
      path: '/admin'
      fullPath: '/apps/edit/$key/web/admin'
      preLoaderRoute: typeof AppsEditKeyWebAdminIndexRouteImport
      parentRoute: typeof AppsEditKeyWebRouteRoute
    }
    '/apps/edit/$key/admin/sections/$sectionKey': {
      id: '/apps/edit/$key/admin/sections/$sectionKey'
      path: '/$sectionKey'
      fullPath: '/apps/edit/$key/admin/sections/$sectionKey'
      preLoaderRoute: typeof AppsEditKeyAdminSectionsSectionKeyRouteImport
      parentRoute: typeof AppsEditKeyAdminSectionsRoute
    }
  }
}

interface AppsEditKeyAdminSectionsRouteChildren {
  AppsEditKeyAdminSectionsSectionKeyRoute: typeof AppsEditKeyAdminSectionsSectionKeyRoute
}

const AppsEditKeyAdminSectionsRouteChildren: AppsEditKeyAdminSectionsRouteChildren =
  {
    AppsEditKeyAdminSectionsSectionKeyRoute:
      AppsEditKeyAdminSectionsSectionKeyRoute,
  }

const AppsEditKeyAdminSectionsRouteWithChildren =
  AppsEditKeyAdminSectionsRoute._addFileChildren(
    AppsEditKeyAdminSectionsRouteChildren,
  )

interface AppsEditKeyAdminRouteRouteChildren {
  AppsEditKeyAdminSectionsRoute: typeof AppsEditKeyAdminSectionsRouteWithChildren
  AppsEditKeyAdminIndexRoute: typeof AppsEditKeyAdminIndexRoute
}

const AppsEditKeyAdminRouteRouteChildren: AppsEditKeyAdminRouteRouteChildren = {
  AppsEditKeyAdminSectionsRoute: AppsEditKeyAdminSectionsRouteWithChildren,
  AppsEditKeyAdminIndexRoute: AppsEditKeyAdminIndexRoute,
}

const AppsEditKeyAdminRouteRouteWithChildren =
  AppsEditKeyAdminRouteRoute._addFileChildren(
    AppsEditKeyAdminRouteRouteChildren,
  )

interface AppsEditKeyWebRouteRouteChildren {
  AppsEditKeyWebIndexRoute: typeof AppsEditKeyWebIndexRoute
  AppsEditKeyWebAdminIndexRoute: typeof AppsEditKeyWebAdminIndexRoute
}

const AppsEditKeyWebRouteRouteChildren: AppsEditKeyWebRouteRouteChildren = {
  AppsEditKeyWebIndexRoute: AppsEditKeyWebIndexRoute,
  AppsEditKeyWebAdminIndexRoute: AppsEditKeyWebAdminIndexRoute,
}

const AppsEditKeyWebRouteRouteWithChildren =
  AppsEditKeyWebRouteRoute._addFileChildren(AppsEditKeyWebRouteRouteChildren)

interface AppsEditKeyRouteRouteChildren {
  AppsEditKeyAdminRouteRoute: typeof AppsEditKeyAdminRouteRouteWithChildren
  AppsEditKeyWebRouteRoute: typeof AppsEditKeyWebRouteRouteWithChildren
  AppsEditKeyBackendRoute: typeof AppsEditKeyBackendRoute
  AppsEditKeyIndexRoute: typeof AppsEditKeyIndexRoute
}

const AppsEditKeyRouteRouteChildren: AppsEditKeyRouteRouteChildren = {
  AppsEditKeyAdminRouteRoute: AppsEditKeyAdminRouteRouteWithChildren,
  AppsEditKeyWebRouteRoute: AppsEditKeyWebRouteRouteWithChildren,
  AppsEditKeyBackendRoute: AppsEditKeyBackendRoute,
  AppsEditKeyIndexRoute: AppsEditKeyIndexRoute,
}

const AppsEditKeyRouteRouteWithChildren =
  AppsEditKeyRouteRoute._addFileChildren(AppsEditKeyRouteRouteChildren)

interface AppsRouteRouteChildren {
  AppsIndexRoute: typeof AppsIndexRoute
  AppsEditKeyRouteRoute: typeof AppsEditKeyRouteRouteWithChildren
}

const AppsRouteRouteChildren: AppsRouteRouteChildren = {
  AppsIndexRoute: AppsIndexRoute,
  AppsEditKeyRouteRoute: AppsEditKeyRouteRouteWithChildren,
}

const AppsRouteRouteWithChildren = AppsRouteRoute._addFileChildren(
  AppsRouteRouteChildren,
)

interface DataEnumsEditKeyRouteRouteChildren {
  DataEnumsEditKeyIndexRoute: typeof DataEnumsEditKeyIndexRoute
}

const DataEnumsEditKeyRouteRouteChildren: DataEnumsEditKeyRouteRouteChildren = {
  DataEnumsEditKeyIndexRoute: DataEnumsEditKeyIndexRoute,
}

const DataEnumsEditKeyRouteRouteWithChildren =
  DataEnumsEditKeyRouteRoute._addFileChildren(
    DataEnumsEditKeyRouteRouteChildren,
  )

interface DataEnumsRouteRouteChildren {
  DataEnumsIndexRoute: typeof DataEnumsIndexRoute
  DataEnumsEditKeyRouteRoute: typeof DataEnumsEditKeyRouteRouteWithChildren
}

const DataEnumsRouteRouteChildren: DataEnumsRouteRouteChildren = {
  DataEnumsIndexRoute: DataEnumsIndexRoute,
  DataEnumsEditKeyRouteRoute: DataEnumsEditKeyRouteRouteWithChildren,
}

const DataEnumsRouteRouteWithChildren = DataEnumsRouteRoute._addFileChildren(
  DataEnumsRouteRouteChildren,
)

interface DataModelsEditKeyRouteRouteChildren {
  DataModelsEditKeyGraphqlRoute: typeof DataModelsEditKeyGraphqlRoute
  DataModelsEditKeyServiceRoute: typeof DataModelsEditKeyServiceRoute
  DataModelsEditKeyIndexRoute: typeof DataModelsEditKeyIndexRoute
}

const DataModelsEditKeyRouteRouteChildren: DataModelsEditKeyRouteRouteChildren =
  {
    DataModelsEditKeyGraphqlRoute: DataModelsEditKeyGraphqlRoute,
    DataModelsEditKeyServiceRoute: DataModelsEditKeyServiceRoute,
    DataModelsEditKeyIndexRoute: DataModelsEditKeyIndexRoute,
  }

const DataModelsEditKeyRouteRouteWithChildren =
  DataModelsEditKeyRouteRoute._addFileChildren(
    DataModelsEditKeyRouteRouteChildren,
  )

interface DataModelsRouteRouteChildren {
  DataModelsIndexRoute: typeof DataModelsIndexRoute
  DataModelsEditKeyRouteRoute: typeof DataModelsEditKeyRouteRouteWithChildren
}

const DataModelsRouteRouteChildren: DataModelsRouteRouteChildren = {
  DataModelsIndexRoute: DataModelsIndexRoute,
  DataModelsEditKeyRouteRoute: DataModelsEditKeyRouteRouteWithChildren,
}

const DataModelsRouteRouteWithChildren = DataModelsRouteRoute._addFileChildren(
  DataModelsRouteRouteChildren,
)

interface DataRouteRouteChildren {
  DataEnumsRouteRoute: typeof DataEnumsRouteRouteWithChildren
  DataModelsRouteRoute: typeof DataModelsRouteRouteWithChildren
  DataIndexRoute: typeof DataIndexRoute
}

const DataRouteRouteChildren: DataRouteRouteChildren = {
  DataEnumsRouteRoute: DataEnumsRouteRouteWithChildren,
  DataModelsRouteRoute: DataModelsRouteRouteWithChildren,
  DataIndexRoute: DataIndexRoute,
}

const DataRouteRouteWithChildren = DataRouteRoute._addFileChildren(
  DataRouteRouteChildren,
)

interface PluginsRouteRouteChildren {
  PluginsIndexRoute: typeof PluginsIndexRoute
  PluginsEditIdRoute: typeof PluginsEditIdRoute
}

const PluginsRouteRouteChildren: PluginsRouteRouteChildren = {
  PluginsIndexRoute: PluginsIndexRoute,
  PluginsEditIdRoute: PluginsEditIdRoute,
}

const PluginsRouteRouteWithChildren = PluginsRouteRoute._addFileChildren(
  PluginsRouteRouteChildren,
)

interface SettingsRouteRouteChildren {
  SettingsHierarchyRoute: typeof SettingsHierarchyRoute
  SettingsTemplateExtractorRoute: typeof SettingsTemplateExtractorRoute
  SettingsThemeBuilderRoute: typeof SettingsThemeBuilderRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const SettingsRouteRouteChildren: SettingsRouteRouteChildren = {
  SettingsHierarchyRoute: SettingsHierarchyRoute,
  SettingsTemplateExtractorRoute: SettingsTemplateExtractorRoute,
  SettingsThemeBuilderRoute: SettingsThemeBuilderRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

const SettingsRouteRouteWithChildren = SettingsRouteRoute._addFileChildren(
  SettingsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppsRouteRoute: AppsRouteRouteWithChildren,
  DataRouteRoute: DataRouteRouteWithChildren,
  PluginsRouteRoute: PluginsRouteRouteWithChildren,
  SettingsRouteRoute: SettingsRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
