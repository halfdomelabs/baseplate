import type { TsImportMapProviderFromSchema } from '@baseplate-dev/core-generators';

import {
  createTsImportMap,
  createTsImportMapSchema,
  packageScope,
} from '@baseplate-dev/core-generators';
import {
  createGeneratorTask,
  createReadOnlyProviderType,
} from '@baseplate-dev/sync';

import { CORE_REACT_COMPONENTS_PATHS } from './template-paths.js';

const reactComponentsImportsSchema = createTsImportMapSchema({
  AddOptionRequiredFields: { isTypeOnly: true },
  Alert: {},
  AlertDescription: {},
  AlertTitle: {},
  Badge: {},
  badgeVariants: {},
  BadgeWithIcon: {},
  BadgeWithIconProps: { isTypeOnly: true },
  Breadcrumb: {},
  BreadcrumbEllipsis: {},
  BreadcrumbItem: {},
  BreadcrumbLink: {},
  BreadcrumbList: {},
  BreadcrumbPage: {},
  BreadcrumbSeparator: {},
  Button: {},
  buttonVariants: {},
  Calendar: {},
  Card: {},
  CardContent: {},
  CardDescription: {},
  CardFooter: {},
  CardHeader: {},
  CardTitle: {},
  Checkbox: {},
  CheckboxField: {},
  CheckboxFieldController: {},
  CheckedInput: {},
  CircularProgress: {},
  cn: {},
  Combobox: {},
  ComboboxField: {},
  ComboboxFieldController: {},
  Command: {},
  CommandDialog: {},
  CommandEmpty: {},
  CommandGroup: {},
  CommandInput: {},
  CommandItem: {},
  CommandList: {},
  CommandSeparator: {},
  CommandShortcut: {},
  ConfirmDialog: {},
  DatePickerField: {},
  DatePickerFieldController: {},
  DateTimePickerField: {},
  DateTimePickerFieldController: {},
  Dialog: {},
  DialogClose: {},
  DialogContent: {},
  DialogDescription: {},
  DialogFooter: {},
  DialogHeader: {},
  DialogOverlay: {},
  DialogPortal: {},
  DialogTitle: {},
  DialogTrigger: {},
  DialogWidth: { isTypeOnly: true },
  DropdownMenu: {},
  DropdownMenuCheckboxItem: {},
  DropdownMenuContent: {},
  DropdownMenuGroup: {},
  DropdownMenuItem: {},
  DropdownMenuLabel: {},
  DropdownMenuPortal: {},
  DropdownMenuRadioGroup: {},
  DropdownMenuRadioItem: {},
  DropdownMenuSeparator: {},
  DropdownMenuShortcut: {},
  DropdownMenuSub: {},
  DropdownMenuSubContent: {},
  DropdownMenuSubTrigger: {},
  DropdownMenuTrigger: {},
  EmptyDisplay: {},
  ErrorableLoader: {},
  ErrorDisplay: {},
  FormControl: {},
  FormDescription: {},
  FormFieldProps: { isTypeOnly: true },
  FormItem: {},
  FormLabel: {},
  FormMessage: {},
  IconElement: { isTypeOnly: true },
  Input: {},
  InputField: {},
  InputFieldController: {},
  inputVariants: {},
  Label: {},
  LinkButton: {},
  Loader: {},
  mergeRefs: {},
  Modal: {},
  MultiCombobox: {},
  MultiComboboxContent: {},
  MultiComboboxEmpty: {},
  MultiComboboxField: {},
  MultiComboboxFieldController: {},
  MultiComboboxFieldProps: { isTypeOnly: true },
  MultiComboboxGroup: {},
  MultiComboboxInput: {},
  MultiComboboxItem: {},
  MultiSelectOptionProps: { isTypeOnly: true },
  NavigationMenu: {},
  NavigationMenuContent: {},
  NavigationMenuIndicator: {},
  NavigationMenuItem: {},
  NavigationMenuItemWithLink: {},
  NavigationMenuLink: {},
  NavigationMenuList: {},
  NavigationMenuTrigger: {},
  navigationMenuTriggerStyle: {},
  NavigationMenuViewport: {},
  NotFoundCard: {},
  Popover: {},
  PopoverAnchor: {},
  PopoverContent: {},
  PopoverTrigger: {},
  ReactDatePickerInput: {},
  ReactSelectInput: {},
  ScrollArea: {},
  Select: {},
  selectCheckVariants: {},
  selectContentVariants: {},
  SelectField: {},
  SelectFieldController: {},
  SelectInput: {},
  selectItemVariants: {},
  SelectOptionProps: { isTypeOnly: true },
  selectTriggerVariants: {},
  Separator: {},
  Sheet: {},
  SheetClose: {},
  SheetContent: {},
  SheetDescription: {},
  SheetFooter: {},
  SheetHeader: {},
  SheetTitle: {},
  SheetTrigger: {},
  Sidebar: {},
  SidebarContent: {},
  SidebarFooter: {},
  SidebarGroup: {},
  SidebarGroupAction: {},
  SidebarGroupContent: {},
  SidebarGroupLabel: {},
  SidebarHeader: {},
  SidebarInput: {},
  SidebarInset: {},
  SidebarMenu: {},
  SidebarMenuAction: {},
  SidebarMenuBadge: {},
  SidebarMenuButton: {},
  SidebarMenuItem: {},
  SidebarMenuSkeleton: {},
  SidebarMenuSub: {},
  SidebarMenuSubButton: {},
  SidebarMenuSubItem: {},
  SidebarProvider: {},
  SidebarRail: {},
  SidebarSeparator: {},
  SidebarTrigger: {},
  Skeleton: {},
  Switch: {},
  SwitchField: {},
  SwitchFieldController: {},
  Table: {},
  TableBody: {},
  TableCaption: {},
  TableCell: {},
  TableFooter: {},
  TableHead: {},
  TableHeader: {},
  TableRow: {},
  Textarea: {},
  TextareaField: {},
  TextareaFieldController: {},
  TextAreaInput: {},
  TextInput: {},
  Toaster: {},
  Tooltip: {},
  TooltipContent: {},
  TooltipProvider: {},
  TooltipTrigger: {},
  useConfirmDialog: {},
  UseConfirmDialogRequestOptions: { isTypeOnly: true },
  useConfirmDialogState: {},
  useControlledState: {},
  useControllerMerged: {},
  useIsMobile: {},
  useMultiComboboxContext: {},
  useSidebar: {},
});

export type ReactComponentsImportsProvider = TsImportMapProviderFromSchema<
  typeof reactComponentsImportsSchema
>;

export const reactComponentsImportsProvider =
  createReadOnlyProviderType<ReactComponentsImportsProvider>(
    'react-components-imports',
  );

const coreReactComponentsImportsTask = createGeneratorTask({
  dependencies: {
    paths: CORE_REACT_COMPONENTS_PATHS.provider,
  },
  exports: {
    reactComponentsImports: reactComponentsImportsProvider.export(packageScope),
  },
  run({ paths }) {
    return {
      providers: {
        reactComponentsImports: createTsImportMap(
          reactComponentsImportsSchema,
          {
            AddOptionRequiredFields: paths.typesForm,
            Alert: paths.alert,
            AlertDescription: paths.alert,
            AlertTitle: paths.alert,
            Badge: paths.badge,
            badgeVariants: paths.badge,
            BadgeWithIcon: paths.badge,
            BadgeWithIconProps: paths.badge,
            Breadcrumb: paths.breadcrumb,
            BreadcrumbEllipsis: paths.breadcrumb,
            BreadcrumbItem: paths.breadcrumb,
            BreadcrumbLink: paths.breadcrumb,
            BreadcrumbList: paths.breadcrumb,
            BreadcrumbPage: paths.breadcrumb,
            BreadcrumbSeparator: paths.breadcrumb,
            Button: paths.button,
            buttonVariants: paths.stylesButton,
            Calendar: paths.calendar,
            Card: paths.card,
            CardContent: paths.card,
            CardDescription: paths.card,
            CardFooter: paths.card,
            CardHeader: paths.card,
            CardTitle: paths.card,
            Checkbox: paths.checkbox,
            CheckboxField: paths.checkboxField,
            CheckboxFieldController: paths.checkboxField,
            CheckedInput: paths.checkbox,
            CircularProgress: paths.circularProgress,
            cn: paths.cn,
            Combobox: paths.combobox,
            ComboboxField: paths.comboboxField,
            ComboboxFieldController: paths.comboboxField,
            Command: paths.command,
            CommandDialog: paths.command,
            CommandEmpty: paths.command,
            CommandGroup: paths.command,
            CommandInput: paths.command,
            CommandItem: paths.command,
            CommandList: paths.command,
            CommandSeparator: paths.command,
            CommandShortcut: paths.command,
            ConfirmDialog: paths.confirmDialog,
            DatePickerField: paths.datePickerField,
            DatePickerFieldController: paths.datePickerField,
            DateTimePickerField: paths.dateTimePickerField,
            DateTimePickerFieldController: paths.dateTimePickerField,
            Dialog: paths.dialog,
            DialogClose: paths.dialog,
            DialogContent: paths.dialog,
            DialogDescription: paths.dialog,
            DialogFooter: paths.dialog,
            DialogHeader: paths.dialog,
            DialogOverlay: paths.dialog,
            DialogPortal: paths.dialog,
            DialogTitle: paths.dialog,
            DialogTrigger: paths.dialog,
            DialogWidth: paths.dialog,
            DropdownMenu: paths.dropdown,
            DropdownMenuCheckboxItem: paths.dropdown,
            DropdownMenuContent: paths.dropdown,
            DropdownMenuGroup: paths.dropdown,
            DropdownMenuItem: paths.dropdown,
            DropdownMenuLabel: paths.dropdown,
            DropdownMenuPortal: paths.dropdown,
            DropdownMenuRadioGroup: paths.dropdown,
            DropdownMenuRadioItem: paths.dropdown,
            DropdownMenuSeparator: paths.dropdown,
            DropdownMenuShortcut: paths.dropdown,
            DropdownMenuSub: paths.dropdown,
            DropdownMenuSubContent: paths.dropdown,
            DropdownMenuSubTrigger: paths.dropdown,
            DropdownMenuTrigger: paths.dropdown,
            EmptyDisplay: paths.emptyDisplay,
            ErrorableLoader: paths.errorableLoader,
            ErrorDisplay: paths.errorDisplay,
            FormControl: paths.formItem,
            FormDescription: paths.formItem,
            FormFieldProps: paths.typesForm,
            FormItem: paths.formItem,
            FormLabel: paths.formItem,
            FormMessage: paths.formItem,
            IconElement: paths.typesIcon,
            Input: paths.input,
            InputField: paths.inputField,
            InputFieldController: paths.inputField,
            inputVariants: paths.stylesInput,
            Label: paths.label,
            LinkButton: paths.button,
            Loader: paths.loader,
            mergeRefs: paths.mergeRefs,
            Modal: paths.dialog,
            MultiCombobox: paths.multiCombobox,
            MultiComboboxContent: paths.multiCombobox,
            MultiComboboxEmpty: paths.multiCombobox,
            MultiComboboxField: paths.multiComboboxField,
            MultiComboboxFieldController: paths.multiComboboxField,
            MultiComboboxFieldProps: paths.multiComboboxField,
            MultiComboboxGroup: paths.multiCombobox,
            MultiComboboxInput: paths.multiCombobox,
            MultiComboboxItem: paths.multiCombobox,
            MultiSelectOptionProps: paths.typesForm,
            NavigationMenu: paths.navigationMenu,
            NavigationMenuContent: paths.navigationMenu,
            NavigationMenuIndicator: paths.navigationMenu,
            NavigationMenuItem: paths.navigationMenu,
            NavigationMenuItemWithLink: paths.navigationMenu,
            NavigationMenuLink: paths.navigationMenu,
            NavigationMenuList: paths.navigationMenu,
            NavigationMenuTrigger: paths.navigationMenu,
            navigationMenuTriggerStyle: paths.navigationMenu,
            NavigationMenuViewport: paths.navigationMenu,
            NotFoundCard: paths.notFoundCard,
            Popover: paths.popover,
            PopoverAnchor: paths.popover,
            PopoverContent: paths.popover,
            PopoverTrigger: paths.popover,
            ReactDatePickerInput: paths.datePickerField,
            ReactSelectInput: paths.select,
            ScrollArea: paths.scrollArea,
            Select: paths.select,
            selectCheckVariants: paths.stylesSelect,
            selectContentVariants: paths.stylesSelect,
            SelectField: paths.selectField,
            SelectFieldController: paths.selectField,
            SelectInput: paths.select,
            selectItemVariants: paths.stylesSelect,
            SelectOptionProps: paths.typesForm,
            selectTriggerVariants: paths.stylesSelect,
            Separator: paths.separator,
            Sheet: paths.sheet,
            SheetClose: paths.sheet,
            SheetContent: paths.sheet,
            SheetDescription: paths.sheet,
            SheetFooter: paths.sheet,
            SheetHeader: paths.sheet,
            SheetTitle: paths.sheet,
            SheetTrigger: paths.sheet,
            Sidebar: paths.sidebar,
            SidebarContent: paths.sidebar,
            SidebarFooter: paths.sidebar,
            SidebarGroup: paths.sidebar,
            SidebarGroupAction: paths.sidebar,
            SidebarGroupContent: paths.sidebar,
            SidebarGroupLabel: paths.sidebar,
            SidebarHeader: paths.sidebar,
            SidebarInput: paths.sidebar,
            SidebarInset: paths.sidebar,
            SidebarMenu: paths.sidebar,
            SidebarMenuAction: paths.sidebar,
            SidebarMenuBadge: paths.sidebar,
            SidebarMenuButton: paths.sidebar,
            SidebarMenuItem: paths.sidebar,
            SidebarMenuSkeleton: paths.sidebar,
            SidebarMenuSub: paths.sidebar,
            SidebarMenuSubButton: paths.sidebar,
            SidebarMenuSubItem: paths.sidebar,
            SidebarProvider: paths.sidebar,
            SidebarRail: paths.sidebar,
            SidebarSeparator: paths.sidebar,
            SidebarTrigger: paths.sidebar,
            Skeleton: paths.skeleton,
            Switch: paths.switchComponent,
            SwitchField: paths.switchField,
            SwitchFieldController: paths.switchField,
            Table: paths.table,
            TableBody: paths.table,
            TableCaption: paths.table,
            TableCell: paths.table,
            TableFooter: paths.table,
            TableHead: paths.table,
            TableHeader: paths.table,
            TableRow: paths.table,
            Textarea: paths.textarea,
            TextareaField: paths.textareaField,
            TextareaFieldController: paths.textareaField,
            TextAreaInput: paths.textarea,
            TextInput: paths.input,
            Toaster: paths.toaster,
            Tooltip: paths.tooltip,
            TooltipContent: paths.tooltip,
            TooltipProvider: paths.tooltip,
            TooltipTrigger: paths.tooltip,
            useConfirmDialog: paths.useConfirmDialog,
            UseConfirmDialogRequestOptions: paths.useConfirmDialog,
            useConfirmDialogState: paths.useConfirmDialog,
            useControlledState: paths.hooksUseControlledState,
            useControllerMerged: paths.hooksUseControllerMerged,
            useIsMobile: paths.useMobile,
            useMultiComboboxContext: paths.multiCombobox,
            useSidebar: paths.sidebar,
          },
        ),
      },
    };
  },
});

export const CORE_REACT_COMPONENTS_IMPORTS = {
  task: coreReactComponentsImportsTask,
};
